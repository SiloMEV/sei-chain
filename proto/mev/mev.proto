syntax = "proto3";
package seiprotocol.seichain.mev;

import "gogoproto/gogo.proto";

option go_package = "github.com/sei-protocol/sei-chain/mev";

//// Msg defines the mev module's gRPC message service
//service MevRpcService {
//  rpc SubmitBundle(MsgSubmitBundle) returns (MsgSubmitBundleResponse);
//  rpc PendingBundles(QueryPendingBundlesRequest) returns (QueryPendingBundlesResponse);
//}
//
//// MsgSubmitBundle represents a message to submit a bundle of transactions
//message MsgSubmitBundle {
//  string sender = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
//  repeated bytes txs = 2 [(gogoproto.moretags) = "yaml:\"txs\""];
//  uint64 block_num = 3 [(gogoproto.moretags) = "yaml:\"block_num\""];
//  int64 timestamp = 4 [(gogoproto.moretags) = "yaml:\"timestamp\""];
//}
//
//
//// MsgSubmitBundleResponse defines the response structure
//message MsgSubmitBundleResponse {
//  bool success = 1 [(gogoproto.moretags) = "yaml:\"success\""];
//}
//
//// QueryPendingBundlesRequest is the request type for querying pending bundles
//message QueryPendingBundlesRequest {}
//
//// QueryPendingBundlesResponse is the response type for querying pending bundles
//message QueryPendingBundlesResponse {
//  repeated Bundle bundles = 1 [(gogoproto.nullable) = false];
//}
//
//// Bundle represents a MEV bundle
//message Bundle {
//  string sender = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
//  repeated bytes txs = 2 [(gogoproto.moretags) = "yaml:\"txs\""];
//  uint64 block_num = 3 [(gogoproto.moretags) = "yaml:\"block_num\""];
//  int64 timestamp = 4 [(gogoproto.moretags) = "yaml:\"timestamp\""];
//}