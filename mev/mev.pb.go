// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mev/mev.proto

package mev

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSubmitBundle represents a message to submit a bundle of transactions
type MsgSubmitBundle struct {
	Sender    string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Txs       [][]byte `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty" yaml:"txs"`
	BlockNum  uint64   `protobuf:"varint,3,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty" yaml:"block_num"`
	Timestamp int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty" yaml:"timestamp"`
}

func (m *MsgSubmitBundle) Reset()         { *m = MsgSubmitBundle{} }
func (m *MsgSubmitBundle) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBundle) ProtoMessage()    {}
func (*MsgSubmitBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b171feff0477b49, []int{0}
}
func (m *MsgSubmitBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBundle.Merge(m, src)
}
func (m *MsgSubmitBundle) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBundle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBundle proto.InternalMessageInfo

func (m *MsgSubmitBundle) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitBundle) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *MsgSubmitBundle) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *MsgSubmitBundle) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// MsgSubmitBundleResponse defines the response structure
type MsgSubmitBundleResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty" yaml:"success"`
}

func (m *MsgSubmitBundleResponse) Reset()         { *m = MsgSubmitBundleResponse{} }
func (m *MsgSubmitBundleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBundleResponse) ProtoMessage()    {}
func (*MsgSubmitBundleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b171feff0477b49, []int{1}
}
func (m *MsgSubmitBundleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBundleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBundleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBundleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBundleResponse.Merge(m, src)
}
func (m *MsgSubmitBundleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBundleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBundleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBundleResponse proto.InternalMessageInfo

func (m *MsgSubmitBundleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// QueryPendingBundlesRequest is the request type for querying pending bundles
type QueryPendingBundlesRequest struct {
}

func (m *QueryPendingBundlesRequest) Reset()         { *m = QueryPendingBundlesRequest{} }
func (m *QueryPendingBundlesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingBundlesRequest) ProtoMessage()    {}
func (*QueryPendingBundlesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b171feff0477b49, []int{2}
}
func (m *QueryPendingBundlesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingBundlesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingBundlesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingBundlesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingBundlesRequest.Merge(m, src)
}
func (m *QueryPendingBundlesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingBundlesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingBundlesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingBundlesRequest proto.InternalMessageInfo

// QueryPendingBundlesResponse is the response type for querying pending bundles
type QueryPendingBundlesResponse struct {
	Bundles []Bundle `protobuf:"bytes,1,rep,name=bundles,proto3" json:"bundles"`
}

func (m *QueryPendingBundlesResponse) Reset()         { *m = QueryPendingBundlesResponse{} }
func (m *QueryPendingBundlesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingBundlesResponse) ProtoMessage()    {}
func (*QueryPendingBundlesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b171feff0477b49, []int{3}
}
func (m *QueryPendingBundlesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingBundlesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingBundlesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingBundlesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingBundlesResponse.Merge(m, src)
}
func (m *QueryPendingBundlesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingBundlesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingBundlesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingBundlesResponse proto.InternalMessageInfo

func (m *QueryPendingBundlesResponse) GetBundles() []Bundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

// Bundle represents a MEV bundle
type Bundle struct {
	Sender    string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Txs       [][]byte `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty" yaml:"txs"`
	BlockNum  uint64   `protobuf:"varint,3,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty" yaml:"block_num"`
	Timestamp int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty" yaml:"timestamp"`
}

func (m *Bundle) Reset()         { *m = Bundle{} }
func (m *Bundle) String() string { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()    {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b171feff0477b49, []int{4}
}
func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(m, src)
}
func (m *Bundle) XXX_Size() int {
	return m.Size()
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Bundle) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *Bundle) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *Bundle) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgSubmitBundle)(nil), "seiprotocol.seichain.mev.MsgSubmitBundle")
	proto.RegisterType((*MsgSubmitBundleResponse)(nil), "seiprotocol.seichain.mev.MsgSubmitBundleResponse")
	proto.RegisterType((*QueryPendingBundlesRequest)(nil), "seiprotocol.seichain.mev.QueryPendingBundlesRequest")
	proto.RegisterType((*QueryPendingBundlesResponse)(nil), "seiprotocol.seichain.mev.QueryPendingBundlesResponse")
	proto.RegisterType((*Bundle)(nil), "seiprotocol.seichain.mev.Bundle")
}

func init() { proto.RegisterFile("mev/mev.proto", fileDescriptor_4b171feff0477b49) }

var fileDescriptor_4b171feff0477b49 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x53, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xcf, 0xe1, 0x28, 0x6d, 0x1e, 0x4d, 0x80, 0x53, 0x25, 0xac, 0x80, 0x6c, 0xeb, 0x24, 0x24,
	0x23, 0x81, 0xa3, 0x06, 0x58, 0x58, 0x40, 0x5e, 0x98, 0x8a, 0xe0, 0xba, 0xb1, 0x54, 0xb1, 0xf3,
	0xe4, 0x9e, 0xf0, 0xd9, 0x21, 0xe7, 0xb3, 0xda, 0x81, 0xef, 0xc0, 0x07, 0x62, 0x45, 0xea, 0xd8,
	0x91, 0xc9, 0x42, 0xc9, 0x37, 0xc8, 0xcc, 0x80, 0xe2, 0x4b, 0x02, 0x8d, 0xb0, 0x04, 0x63, 0xb7,
	0x77, 0xef, 0xf7, 0xe7, 0xe9, 0xdd, 0xef, 0x0e, 0x7a, 0x12, 0xcb, 0xa1, 0xc4, 0x32, 0x98, 0xce,
	0xf2, 0x22, 0xa7, 0xb6, 0x42, 0x51, 0x57, 0x71, 0x9e, 0x06, 0x0a, 0x45, 0x7c, 0x36, 0x16, 0x59,
	0x20, 0xb1, 0x1c, 0x1c, 0x26, 0x79, 0x92, 0xd7, 0xd0, 0x70, 0x55, 0x19, 0x3e, 0xfb, 0x46, 0xe0,
	0xce, 0xb1, 0x4a, 0x4e, 0x74, 0x24, 0x45, 0x11, 0xea, 0x6c, 0x92, 0x22, 0x7d, 0x0c, 0x1d, 0x85,
	0xd9, 0x04, 0x67, 0x36, 0xf1, 0x88, 0xdf, 0x0d, 0xef, 0x2d, 0x2b, 0xb7, 0x77, 0x31, 0x96, 0xe9,
	0x4b, 0x66, 0xfa, 0x8c, 0xaf, 0x09, 0xd4, 0x03, 0xab, 0x38, 0x57, 0xf6, 0x2d, 0xcf, 0xf2, 0x0f,
	0xc2, 0xfe, 0xb2, 0x72, 0xc1, 0xf0, 0x8a, 0x73, 0xc5, 0xf8, 0x0a, 0xa2, 0x47, 0xd0, 0x8d, 0xd2,
	0x3c, 0xfe, 0x78, 0x9a, 0x69, 0x69, 0x5b, 0x1e, 0xf1, 0xdb, 0xe1, 0xe1, 0xb2, 0x72, 0xef, 0x1a,
	0xde, 0x16, 0x62, 0x7c, 0xbf, 0xae, 0xdf, 0x6a, 0x49, 0x47, 0xd0, 0x2d, 0x84, 0x44, 0x55, 0x8c,
	0xe5, 0xd4, 0x6e, 0x7b, 0xc4, 0xb7, 0xfe, 0x94, 0x6c, 0x21, 0xc6, 0x7f, 0xd3, 0xd8, 0x1b, 0xb8,
	0xbf, 0xb3, 0x06, 0x47, 0x35, 0xcd, 0x33, 0x85, 0xf4, 0x09, 0xec, 0x29, 0x1d, 0xc7, 0xa8, 0x54,
	0xbd, 0xcf, 0x7e, 0x48, 0x97, 0x95, 0xdb, 0x5f, 0xef, 0x63, 0x00, 0xc6, 0x37, 0x14, 0xf6, 0x10,
	0x06, 0xef, 0x35, 0xce, 0x2e, 0xde, 0x61, 0x36, 0x11, 0x59, 0x62, 0xbc, 0x14, 0xc7, 0x4f, 0x1a,
	0x55, 0xc1, 0x4e, 0xe1, 0xc1, 0x5f, 0xd1, 0xf5, 0xa8, 0xd7, 0xb0, 0x17, 0x99, 0x96, 0x4d, 0x3c,
	0xcb, 0xbf, 0x3d, 0xf2, 0x82, 0xa6, 0x3c, 0x02, 0xa3, 0x0d, 0xdb, 0x97, 0x95, 0xdb, 0xe2, 0x1b,
	0x19, 0xfb, 0x4a, 0xa0, 0x73, 0x73, 0x63, 0x18, 0xfd, 0x24, 0xd0, 0x3b, 0xc6, 0x92, 0x4f, 0xe3,
	0x13, 0x9c, 0x95, 0x22, 0x46, 0x9a, 0xc2, 0xc1, 0xf5, 0xc7, 0xd5, 0x7c, 0x23, 0x3b, 0x01, 0x0e,
	0x8e, 0xfe, 0x99, 0xba, 0x0d, 0xe0, 0x33, 0xf4, 0xaf, 0x47, 0x43, 0x9f, 0x37, 0x9b, 0x34, 0xe7,
	0x3c, 0x78, 0xf1, 0x9f, 0x2a, 0x33, 0x3e, 0x7c, 0x75, 0x39, 0x77, 0xc8, 0xd5, 0xdc, 0x21, 0x3f,
	0xe6, 0x0e, 0xf9, 0xb2, 0x70, 0x5a, 0x57, 0x0b, 0xa7, 0xf5, 0x7d, 0xe1, 0xb4, 0x3e, 0x3c, 0x4a,
	0x44, 0x71, 0xa6, 0xa3, 0x20, 0xce, 0xe5, 0x50, 0xa1, 0x78, 0xba, 0xf1, 0xae, 0x0f, 0xb5, 0xf9,
	0xea, 0x13, 0x47, 0x9d, 0xba, 0xff, 0xec, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xfb, 0xcb,
	0xd5, 0xd6, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MevRpcServiceClient is the client API for MevRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MevRpcServiceClient interface {
	SubmitBundle(ctx context.Context, in *MsgSubmitBundle, opts ...grpc.CallOption) (*MsgSubmitBundleResponse, error)
	PendingBundles(ctx context.Context, in *QueryPendingBundlesRequest, opts ...grpc.CallOption) (*QueryPendingBundlesResponse, error)
}

type mevRpcServiceClient struct {
	cc grpc1.ClientConn
}

func NewMevRpcServiceClient(cc grpc1.ClientConn) MevRpcServiceClient {
	return &mevRpcServiceClient{cc}
}

func (c *mevRpcServiceClient) SubmitBundle(ctx context.Context, in *MsgSubmitBundle, opts ...grpc.CallOption) (*MsgSubmitBundleResponse, error) {
	out := new(MsgSubmitBundleResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.mev.MevRpcService/SubmitBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mevRpcServiceClient) PendingBundles(ctx context.Context, in *QueryPendingBundlesRequest, opts ...grpc.CallOption) (*QueryPendingBundlesResponse, error) {
	out := new(QueryPendingBundlesResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.mev.MevRpcService/PendingBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MevRpcServiceServer is the server API for MevRpcService service.
type MevRpcServiceServer interface {
	SubmitBundle(context.Context, *MsgSubmitBundle) (*MsgSubmitBundleResponse, error)
	PendingBundles(context.Context, *QueryPendingBundlesRequest) (*QueryPendingBundlesResponse, error)
}

// UnimplementedMevRpcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMevRpcServiceServer struct {
}

func (*UnimplementedMevRpcServiceServer) SubmitBundle(ctx context.Context, req *MsgSubmitBundle) (*MsgSubmitBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBundle not implemented")
}
func (*UnimplementedMevRpcServiceServer) PendingBundles(ctx context.Context, req *QueryPendingBundlesRequest) (*QueryPendingBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingBundles not implemented")
}

func RegisterMevRpcServiceServer(s grpc1.Server, srv MevRpcServiceServer) {
	s.RegisterService(&_MevRpcService_serviceDesc, srv)
}

func _MevRpcService_SubmitBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MevRpcServiceServer).SubmitBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.mev.MevRpcService/SubmitBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MevRpcServiceServer).SubmitBundle(ctx, req.(*MsgSubmitBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MevRpcService_PendingBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MevRpcServiceServer).PendingBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.mev.MevRpcService/PendingBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MevRpcServiceServer).PendingBundles(ctx, req.(*QueryPendingBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MevRpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seichain.mev.MevRpcService",
	HandlerType: (*MevRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBundle",
			Handler:    _MevRpcService_SubmitBundle_Handler,
		},
		{
			MethodName: "PendingBundles",
			Handler:    _MevRpcService_PendingBundles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mev/mev.proto",
}

func (m *MsgSubmitBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockNum != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintMev(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMev(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBundleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBundleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBundleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingBundlesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingBundlesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingBundlesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPendingBundlesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingBundlesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingBundlesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bundles) > 0 {
		for iNdEx := len(m.Bundles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bundles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMev(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockNum != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintMev(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMev(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMev(dAtA []byte, offset int, v uint64) int {
	offset -= sovMev(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMev(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovMev(uint64(l))
		}
	}
	if m.BlockNum != 0 {
		n += 1 + sovMev(uint64(m.BlockNum))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMev(uint64(m.Timestamp))
	}
	return n
}

func (m *MsgSubmitBundleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *QueryPendingBundlesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPendingBundlesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bundles) > 0 {
		for _, e := range m.Bundles {
			l = e.Size()
			n += 1 + l + sovMev(uint64(l))
		}
	}
	return n
}

func (m *Bundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMev(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovMev(uint64(l))
		}
	}
	if m.BlockNum != 0 {
		n += 1 + sovMev(uint64(m.BlockNum))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMev(uint64(m.Timestamp))
	}
	return n
}

func sovMev(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMev(x uint64) (n int) {
	return sovMev(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBundleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBundleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBundleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingBundlesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingBundlesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingBundlesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingBundlesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingBundlesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingBundlesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bundles = append(m.Bundles, Bundle{})
			if err := m.Bundles[len(m.Bundles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMev(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMev
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMev
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMev
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMev
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMev
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMev
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMev        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMev          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMev = fmt.Errorf("proto: unexpected end of group")
)
